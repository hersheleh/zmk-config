/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define NAV     3
#define BT      4

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

// Uncomment this block if using RGB
/* &led_strip { */
/*   // chain-length = <6>; */
/*     chain-length = <31>; // Uncomment if using both per-key and underglow LEDs */
/*     // chain-length = <25>; // Uncomment if using only per-key LEDs. */
/* }; */

// Empty layer template
// -----------------------------------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                                                |       |       |       |      |       |      |
// |       |     |     |      |      |      |                                                |       |       |       |      |       |      |
// |       |     |     |      |      |      |         |         |        |         |         |       |       |       |      |       |      |
//                     |      |      |      |         |         |        |         |         |       |       |       |
/* bindings = < */
/* &none   &none   &none   &none     &none   &none                               &none &none &none &none &none &none */
/* &none   &none   &none   &none     &none   &none                               &none &none &none &none &none &none */
/* &none   &none   &none   &none     &none   &none   &none &none     &none &none &none &none &none &none &none &none */
/*                         &none     &none   &none   &none &none     &none &none &none &none &none */
/* >; */


// Empty inheriting layer template
// -----------------------------------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                                                |       |       |       |      |       |      |
// |       |     |     |      |      |      |                                                |       |       |       |      |       |      |
// |       |     |     |      |      |      |         |         |        |         |         |       |       |       |      |       |      |
//                     |      |      |      |         |         |        |         |         |       |       |       |
/* bindings = < */
/* &trans &trans &trans &trans &trans &trans                                &trans &trans &trans &trans &trans &trans */
/* &trans &trans &trans &trans &trans &trans                                &trans &trans &trans &trans &trans &trans */
/* &trans &trans &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans &trans &trans */
/*                             &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans */
/* >; */



/ {
    behaviors {
        mo_tog: momentary_toggle_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
			bindings = <&mo>, <&tog>;
        };
		mo_to: momentary_to_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
			bindings = <&mo>, <&to>;
        };
		sh_td: shift_key_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };
		sym_num_td: symbol_number_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo SYM>, <&tog NUM>;
        };
		nav_td: nav_toggle_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo NAV>, <&to NAV>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            // -----------------------------------------------------------------------------------------------------------------------------------------
            // | TAB      | Q | W | E  |   R   |    T    |                                                    |   Y   |  U  |   I   | O |  P  |  BSPC  |
            // | CTRL/ESC | A | S | D  |   F   |    G    |                                                    |   H   |  J  |   K   | L |  ;  |    '   |
            // | LSHIFT   | Z | X | C  |   V   |    B    |    [   | LSHFT |                |  RSHFT  |   ]    |   N   |  M  |   ,   | . |  /  | RSHIFT |
            //                    | BT | SUPER | CTL\SPC | ALT\RET|  NAV  |                | NUM/SYM | SH/RET | SPACE | DEL | R-ALT |
           bindings = <
            &kp TAB        &kp Q  &kp W    &kp E    &kp R &kp T                                                     &kp Y     &kp U     &kp I     &kp O   &kp P    &kp BSPC
            &mt LCTRL ESC  &kp A  &kp S    &kp D    &kp F &kp G                                                     &kp H     &kp J     &kp K     &kp L   &kp SEMI &kp SQT
            &sh_td         &kp Z  &kp X    &kp C    &kp V &kp B     &kp LBKT     &kp LSHFT  &kp RSHIFT  &kp RBKT    &kp N     &kp M     &kp COMMA &kp DOT &kp FSLH &sh_td
                                  &mo BT   &kp LGUI &mt LCTL SPACE  &mt LALT RET &nav_td    &sym_num_td &lt NUM RET &kp SPACE &kp DEL   &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

		numpad_layer {
			// ---------------------------------------------------------------------------------------
			// |   |   |      |  UP   |       |  |                     | /  | 7 |  8  | 9 | 0  |     |
			// |   |   | LEFT | DOWN  | RIGHT |  |                     | +  | 4 |  5  | 6 | *  |  =  |
			// |   |   |      |       |       |  |  |  |         |  |  | -  | 1 |  2  | 3 | /  | RET |
			//                |       |       |  |  |  |         |  |  |    | 0 | DEL |
        bindings = <
        &trans    &trans  &trans    &kp UP    &trans    &trans                                       &kp SLASH &kp N7 &kp N8 &kp N9 &kp N0    &trans
        &trans    &trans  &kp LEFT  &kp DOWN  &kp RIGHT &trans                                       &kp PLUS  &kp N4 &kp N5 &kp N6 &kp STAR  &kp EQUAL
        &kp LSHFT &trans  &trans    &trans    &trans    &trans &trans      &trans             &trans &trans    &kp MINUS &kp N1 &kp N2 &kp N3 &kp SLASH &kp RET
                          &trans    &trans    &kp LCTL  &trans &trans      &mo_to SYM DEFAULT &trans &kp N0    &trans &trans
            >;
        };

        symbol_layer {
          // ---------------------------------------------------------------------------------------------------------------------------------
          // |   `    |  1   |  2   |   3   |   4   |  5    |                                      |  6  |  7   |   8  |   9   |  0  |   =   |
          // |   ~    |  !   |   @  |   #   |  $    |   %   |                                      |  ^  |  &   |   *  |   (   |  )  |   +   |
          // |   |    |  \   |  :   |   ;   |  -    |   [   |   {   |    |              |    |  }  |  ]  |  _   |   ,  |   .   |  /  |   ?   |
          //                        |       |       |       |       |    |              |    |     |     |     |      |
          bindings = <
          &kp GRAVE &kp N1   &kp N2    &kp N3   &kp N4    &kp N5                                        &kp N6    &kp N7    &kp N8    &kp N9   &kp N0    &kp EQUAL
          &kp TILDE &kp EXCL &kp AT    &kp HASH &kp DLLR  &kp PRCNT                                     &kp CARET &kp AMPS  &kp STAR  &kp LPAR &kp RPAR  &kp PLUS
          &kp PIPE  &kp BSLH &kp COLON &kp SEMI &kp MINUS &kp LBKT  &kp LBRC &trans     &trans &kp RBRC &kp RBKT  &kp UNDER &kp COMMA &kp DOT  &kp SLASH &kp QMARK
                                       &trans   &trans    &trans    &trans   &trans     &trans &trans   &trans &trans &trans
          >;

         };


        nav_layer {
          // ---------------------------------------------------------------------------------------------------------------------------------------------
          // |       |     |     |      |      |      |                                                |       |       |  UP   |        |  VOL UP |      |
          // |       |     |     |      |      |      |                                                |       | LEFT  | DOWN  | RIGHT  |  VOL DN |      |
          // |       |     |     |      |      |      |    |     |    |         |         |       |       |       |        |         |      |
          //                     |      |      |      |    |     |    |         |         |       |       |       |
          bindings = <
          &trans &trans   &kp F7 &kp F8  &kp F9   &kp F12                                 &kp HOME  &kp PG_UP &kp UP   &kp PG_DN &kp C_VOL_UP &trans
          &trans &kp HOME &kp F4 &kp F5  &kp F6   &kp F11                                 &kp END   &kp LEFT  &kp DOWN &kp RIGHT &kp C_VOL_DN &trans
          &trans &trans   &kp F1 &kp F2  &kp F3   &kp F10 &trans &trans     &trans &trans &trans &trans   &trans &trans  &kp C_MUTE &trans
                                         &trans   &trans  &trans &trans     &trans &trans &trans &trans   &trans &trans
          >;
        };

        bluetooth_layer {
          // -------------------------------------------------------------------------------------------------------------------------------------------
          // |       |     |     |      | BT_CLR |      |                                                |        |         | OUT_TOG |      |       |      |
          // |       |     |     |      |        |      |                                                |        | BT_PRV  | BT_NXT  |      |       |      |
          // |       |     |     |      |        |      |         |         |        |         |         |        |         |         |      |
          //                     |      |        |      |         |         |        |         |         |        |         |         |
          bindings = <
            &trans &trans &trans &trans &bt BT_CLR &trans                                 &trans &trans      &out OUT_TOG &trans &trans &trans
            &trans &trans &trans &trans &trans     &trans                                 &trans &bt BT_PRV  &bt BT_NXT   &trans &trans &trans
            &trans &trans &trans &trans &trans     &trans &trans &trans     &trans &trans &trans &trans      &trans       &trans &trans &trans
                                        &trans     &trans &trans &trans     &trans &trans &trans &trans      &trans       &trans
            >;
        };

        alph_sym_layer {
          // -----------------------------------------------------------------------------------------------------------------------------------------
          // |   |  |     |  ! |      |      |                                                |       |       |       |      |       |      |
          // |   |  |     |    |      |      |                                                |       |       |       |      |       |      |
          // |   |  |     |    |      |      |         |         |        |         |         |       |       |       |      |       |      |
          //                      |      |      |      |         |         |        |         |         |       |       |       |
          bindings = <
          &trans &trans &trans &trans &trans &trans                                &trans &trans &trans &trans &trans &trans
          &trans &trans &trans &trans &trans &trans                                &trans &trans &trans &trans &trans &trans
          &trans &trans &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans &trans &trans
                                      &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
          >;

        };

        gaming_layer {
          // -----------------------------------------------------------------------------------------------------------------------------------------
          // |   |  |     |  ! |      |      |                                                |       |       |       |      |       |      |
          // |   |  |     |    |      |      |                                                |       |       |       |      |       |      |
          // |   |  |     |    |      |      |         |         |        |         |         |       |       |       |      |       |      |
          //                      |      |      |      |         |         |        |         |         |       |       |       |
          bindings = <
          &trans &trans &trans &trans &trans &trans                                 &trans &trans &trans &trans &trans &trans
          &trans &kp A  &kp W  &kp D  &trans &trans                                 &trans &trans &trans &trans &trans &trans
          &trans &trans &kp S  &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans &trans &trans &trans
                               &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans
          >;

        };
    };
};
